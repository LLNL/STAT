<variablelist>
<varlistentry>
    <term>-a, --autotopo</term>
    <listitem>
        <para>
        let STAT automatically create topology.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-f, --fanout <replaceable class="parameter">width</replaceable></term>
    <listitem>
        <para>
        Sets the maximum tree topology fanout to <replaceable class="parameter">width</replaceable>.  Specify nodes to launch communications processes on with <option>--nodes</option>.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-d, --depth <replaceable class="parameter">depth</replaceable></term>
    <listitem>
        <para>
        Sets the tree topology depth to <replaceable class="parameter">depth</replaceable>.  Specify nodes to launch communications processes on with <option>--nodes</option>.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-z, --daemonspernode <replaceable class="parameter">num</replaceable></term>
    <listitem>
        <para>
        Sets the number of daemons per node to <replaceable class="parameter">num</replaceable>.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-u, --usertopology <replaceable class="parameter">topology</replaceable></term>
    <listitem>
        <para>
        Specify the number of communication nodes per layer in the tree topology, separated by dashes, with <replaceable class="parameter">topology</replaceable>.  Specify nodes to launch communications processes on with <option>--nodes</option>.  Example topologies: 4, 4-16, 5-20-75.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-n, --nodes <replaceable class="parameter">nodelist</replaceable></term>
    <listitem>
        <para>
        Use the specified nodes in <replaceable class="parameter">nodelist</replaceable>.  To be used with <option>--fanout</option>, <option>--depth</option>, or <option>--usertopology</option>.  Example nodes lists: host1; host1,host2; host[1,5-7,9].
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-N, --nodesfile <replaceable class="parameter">filename</replaceable></term>
    <listitem>
        <para>
        Use the file <replaceable class="parameter">filename</replaceable>, which should contain the list of nodes for communication processes
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-A, --appnodes</term>
    <listitem>
        <para>
        Allow tool communication processes to be co-located on nodes running application processes.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-x, --exclusive</term>
    <listitem>
        <para>
        Do not use the front-end or back-end nodes for communication processes.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-p, --procs <replaceable class="parameter">processes</replaceable></term>
    <listitem>
        <para>
        Sets the maximum number of communication processes to be spawned per node to <replaceable class="parameter">processes</replaceable>.  This should typically be set to a number less than or equal to the number of CPU cores per node.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-j, --jobid <replaceable class="parameter">id</replaceable></term>
    <listitem>
        <para>
        Append <replaceable class="parameter">id</replaceable> to the output directory and file prefixes.  This is useful for associating STAT results with a batch job.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-r, --retries <replaceable class="parameter">count</replaceable></term>
    <listitem>
        <para>
        Attempt <replaceable class="parameter">count</replaceable> retries per sample to try to get a complete stack trace.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-R, --retryfreq <replaceable class="parameter">frequency</replaceable></term>
    <listitem>
        <para>
        Wait <replaceable class="parameter">frequency</replaceable> microseconds between sample retries.  To be used with the <option>--retries</option> option.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-P, --withpc</term>
    <listitem>
        <para>
        Sample program counter values in addition to function names.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-m, --withmoduleoffset</term>
    <listitem>
        <para>
        Sample module offset only.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-i, --withline</term>
    <listitem>
        <para>
        Sample source line number in addition to function names.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-o, --withopenmp</term>
    <listitem>
        <para>
        Translate OpenMP stacks to logical application view
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-c, --comprehensive</term>
    <listitem>
        <para>
        Gather 5 traces: function only; module offset; function + PC; function + line; and 3D function only.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-U, --countrep</term>
    <listitem>
        <para>
        Only gather edge labels with the task count and a single representative. This will improve performance at extreme (i.e., over 1 million tasks) scales.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-w, --withthreads</term>
    <listitem>
        <para>
        Sample stack traces from helper threads in addition to the main thread.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-H, --maxdaemonthreads <replaceable class="parameter">count</replaceable></term>
    <listitem>
        <para>
        Allow sampling of up to <replaceable class="parameter">count</replaceable> threads per daemon.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-y, --withpython</term>
    <listitem>
        <para>
        Where applicable, gather Python script level stack traces, rather than show the Python interpreter stack traces.  This requires the Python interpreter being debugged to be built with -g and preferrably -O0.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-t, --traces <replaceable class="parameter">count</replaceable></term>
    <listitem>
        <para>
        Gather <replaceable class="parameter">count</replaceable> traces per process.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-T, --tracefreq <replaceable class="parameter">frequency</replaceable></term>
    <listitem>
        <para>
        Wait <replaceable class="parameter">frequency</replaceable> milliseconds between samples.  To be used with the <option>--traces</option> option.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-S, --sampleindividual</term>
    <listitem>
        <para>
        Save all individual samples in addition to the 3D trace when using <option>--traces</option> option.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-C, --create <replaceable class="parameter">arg_list</replaceable></term>
    <listitem>
        <para>
        Launch the application under STAT's control.  All arguments after -C are used to launch the app.  Namely, <replaceable class="parameter">arg_list</replaceable> is the command that you would normally use to launch your application.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-I, --serial <replaceable class="parameter">arg_list</replaceable></term>
    <listitem>
        <para>
        Attach to a list of serial processes.  All arguments after -I are interpreted as processes.  Namely, <replaceable class="parameter">arg_list</replaceable> is a white-space-separated list of processes to attach to, where each process is of the form [exe@][hostname:]PID.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-D, --daemon <replaceable class="parameter">path</replaceable></term>
    <listitem>
        <para>
        Specify the full path <replaceable class="parameter">path</replaceable> to the STAT daemon executable.  Use this only if you wish to override the default.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-F, --filter <replaceable class="parameter">path</replaceable></term>
    <listitem>
        <para>
        Specify the full path <replaceable class="parameter">path</replaceable> to the STAT filter shared object.  Use this only if you wish to override the default.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-s, --sleep <replaceable class="parameter">time</replaceable></term>
    <listitem>
        <para>
        Sleep for <replaceable class="parameter">time</replaceable> seconds before attaching and gathering traces.  This gives the application time to get to a hung state.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-l, --log <cmdsynopsis><group><arg><replaceable class="parameter">FE</replaceable></arg><arg><replaceable class="parameter">BE</replaceable></arg><arg><replaceable class="parameter">CP</replaceable></arg></group></cmdsynopsis></term>
    <listitem>
        <para>
        Enable debug logging of the <replaceable class="parameter">FE</replaceable> frontend, <replaceable class="parameter">BE</replaceable> backend, <replaceable class="parameter">CP</replaceable> communication process, <replaceable class="parameter">SW</replaceable> Stackwalker, <replaceable class="parameter">SWERR</replaceable> Stackwalker on error. Multiple log options may be specified (i.e., -l FE -l BE).
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-L, --logdir <replaceable class="parameter">log_directory</replaceable></term>
    <listitem>
        <para>
        Dump logging output into <replaceable class="parameter">log_directory</replaceable>.  To be used with the <option>--log</option> option.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-M, --mrnetprintf</term>
    <listitem>
        <para>
        Use MRNet's printf for STAT debug logging.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-X, --dysectapi <replaceable class="parameter">session</replaceable></term>
    <listitem>
        <para>
        Run the specified DySectAPI <replaceable class="parameter">session</replaceable>.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-b, --dysectapi_batch <replaceable class="parameter">secs</replaceable></term>
    <listitem>
        <para>
        Run the specified DySectAPI in batch mode. Session stops after <replaceable class="parameter">secs</replaceable> seconds or detach action.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-G, --gdb</term>
    <listitem>
        <para>
        Use (cuda-)gdb to drive the daemons. If you are using cuda-gdb and want stack traces from cuda threads, you must also explicitly specify -w.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-Q, --cudaquick</term>
    <listitem>
        <para>
        When using cuda-gdb as the BE, gather less comprehensive, but faster cuda traces. Cuda frames will only show the top of the stack, not the full call path. This also defaults to display filename and line number and will not resolve the function name.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-Y, --pyspy</term>
    <listitem>
        <para>
        Use py-spy backend to gather python stack traces.
        </para>
    </listitem>
</varlistentry>
</variablelist>
