<para>
Several files can influence how STAT runs.  The first such file is $prefix/etc/STAT/nodes.txt, which specifies a list of hostnames, one hostname per line, on which to launch MRNet communication processes.  This file is designed to be shared by all users and should point to shared resources that all users have remote shell access to, such as login nodes.  Note that by default STAT will not test access to a node before trying to launch communication processes.  If the STAT_CHECK_NODE_ACCESS environment variable is set to any value, then STAT will try to run (via remote shell) a simple test to see if the node is accessible before adding it to the MRNet tree.  Also note that nodes.txt will not be used if the -A or "Share App Nodes" option is enabled.
</para>
<para>
STAT GUI preferences can be set with an installation specific STAT.conf or user specific .STATrc file.  The installation specific file should be placed in $prefix/etc/STAT/STAT.conf, while the user specific file should be placed in $HOME/.STATrc.  Options specified in the user's .STATrc file will always take precedence over the STAT installation's .STATrc file.  Each preference file specifies one option per line of the format:
</para>
<para>
Option = Value
</para>
<para>
Here is a list of options:
</para>
<variablelist>
<varlistentry>
    <term>Remote Host = <replaceable class="parameter">hostname</replaceable></term>
    <listitem>
        <para>
        Sets the default remote host to <replaceable class="parameter">hostname</replaceable> to search for the job launcher process.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Remote Host Shell = <replaceable class="parameter">rsh|ssh</replaceable></term>
    <listitem>
        <para>
        Sets the default remote host shell to <replaceable class="parameter">rsh</replaceable> or <replaceable class="parameter">ssh</replaceable> to get a process listing on remote hosts.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Resource Manager = <replaceable class="parameter">Auto|Alps|Slurm</replaceable></term>
    <listitem>
        <para>
        Sets the default resource manager to <replaceable class="parameter">Alps</replaceable> or <replaceable class="parameter">Slurm</replaceable> for searching for the job launcher process, or use <replaceable class="parameter">Auto</replaceable> to determine the resourece manager automatically.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Job Launcher = <replaceable class="parameter">regex</replaceable></term>
    <listitem>
        <para>
        Sets the default regular expression to <replaceable class="parameter">regex</replaceable> (i.e., "mpirun|srun") for filtering the process listing for the job launcher process.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Tool Daemon Path = <replaceable class="parameter">path</replaceable></term>
    <listitem>
        <para>
        Use the STAT deamon executable installed in <replaceable class="parameter">path</replaceable> instead of the default.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Filter Path = <replaceable class="parameter">path</replaceable></term>
    <listitem>
        <para>
        Use the STAT filter shared object installed in <replaceable class="parameter">path</replaceable> instead of the default.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Topology Type = <replaceable class="parameter">automatic|depth|max fanout|custom</replaceable></term>
    <listitem>
        <para>
        Use the specified topology type when building the MRNet communication tree.  The <replaceable class="parameter">automatic</replaceable> topology is typically recommended and set by default.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Topology = <replaceable class="parameter">topology</replaceable></term>
    <listitem>
        <para>
        Use <replaceable class="parameter">topology</replaceable> for the specific topology configuration.  This should be used with the Topology Type option.  Refer to the stat-cl options to see valid Topology specifications for a given Topology Type.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Communication Nodes = <replaceable class="parameter">nodelist</replaceable></term>
    <listitem>
        <para>
        Use the nodes listed in <replaceable class="parameter">nodelist</replaceable> for MRNet communication processes.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Check Node Access = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to check access to a node before trying to launch MRNet communication processes on it.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>CP policy = <replaceable class="parameter">none|share app nodes|exclusive</replaceable></term>
    <listitem>
        <para>
        Controls where to launch communication processes.  When set to <replaceable class="parameter">share app nodes</replaceable>, they will be launched on nodes running application processes.  On BlueGene systems, this will actually place them on the I/O nodes, and requires users to be able to access the I/O nodes via a remote shell.  When set to <replaceable class="parameter">exclusive</replaceable>, then the communication processes will only be run on specified nodes that do not run other STAT tool processes (e.g., the STAT frontend and the back-end daemons).
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Communication Processes per Node = <replaceable class="parameter">count</replaceable></term>
    <listitem>
        <para>
        Launch no more than <replaceable class="parameter">count</replaceable> MRNet communication processes per node.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Num Traces = <replaceable class="parameter">count</replaceable></term>
    <listitem>
        <para>
        Gather <replaceable class="parameter">count</replaceable> stack traces when sampling multiple.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Trace Frequency (ms) = <replaceable class="parameter">count</replaceable></term>
    <listitem>
        <para>
        Let the process run <replaceable class="parameter">count</replaceable> milliseconds between multiple samples.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Num Retries = <replaceable class="parameter">count</replaceable></term>
    <listitem>
        <para>
        Attempt <replaceable class="parameter">count</replaceable> retries to try to obtain a complete stack trace.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Retry Frequency (ms) = <replaceable class="parameter">count</replaceable></term>
    <listitem>
        <para>
        Let the process run <replaceable class="parameter">count</replaceable> milliseconds between stack sample retries.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>With Threads = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to gather stack traces from threads.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>With OpenMP = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to translate OpenMP stack traces to logical application view.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Gather Python Traces = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to gather Python script level stack traces, rather than show the Python interpreter stack traces.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Sample Type = <replaceable class="parameter">function only|module offset|function and pc|function and line</replaceable></term>
    <listitem>
        <para>
        Controls the granularity of the nodes in the gathered stack traces.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Edge Type = <replaceable class="parameter">full list|count and representative</replaceable></term>
    <listitem>
        <para>
        Controls the granularity of the edges in the gathered stack traces.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>DDT Path = <replaceable class="parameter">path</replaceable></term>
    <listitem>
        <para>
        Use the DDT executable installed in <replaceable class="parameter">path</replaceable> for subset debugging.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>DDT LaunchMON Prefix = <replaceable class="parameter">path</replaceable></term>
    <listitem>
        <para>
        Use the LaunchMON installation in <replaceable class="parameter">path</replaceable> for improved DDT subset attaching, otherwise attach via hostname:PID pairs.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>TotalView Path = <replaceable class="parameter">path</replaceable></term>
    <listitem>
        <para>
        Use the TotalView executable installed in <replaceable class="parameter">path</replaceable> for subset debugging.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Additional Debugger Args = <replaceable class="parameter">args</replaceable></term>
    <listitem>
        <para>
        Add <replaceable class="parameter">args</replaceable> to the argument list when launching TotalView or DDT.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Log Dir = <replaceable class="parameter">directory</replaceable></term>
    <listitem>
        <para>
        Write STAT debug logs to <replaceable class="parameter">directory</replaceable>.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Log Frontend = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to enable debug logging of the STAT frontend.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Log Backend = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to enable debug logging of the STAT backend.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Log CP = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to enable debug logging of the STAT communication processes.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Log SW = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to enable debug logging of Stackwalker by the STAT backend.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Log SWERR = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to enable debug logging of Stackwalker by the STAT backend when a Stackwalker error is detected.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Use MRNet Printf = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to use MRNet's printf when writing debug logs.  This is helpful to correlate timing between STAT log messages and MRNet debug log messages, when MRNet logging is being logged (via the STAT_MRNET_OUTPUT_LEVEL enviornment variable).
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>GDB BE = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to use (cuda-)gdb to drive the deamons.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>With CUDA QUICK = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        When using cuda-gdb as the BE, controls whether to gather less comprehensive, but faster cuda traces. Cuda frames will only show the top of the stack, not the full call path. This also defaults to display filename and line number and will not resolve the function name.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>GDB Path = <replaceable class="parameter">path</replaceable></term>
    <listitem>
        <para>
        Use the gdb executable installed in <replaceable class="parameter">path</replaceable> for debugging when GDB BE is set to true.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>Use PySpy = <replaceable class="parameter">true|false</replaceable></term>
    <listitem>
        <para>
        Controls whether to use py-spy to drive the deamons.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>PySpy Path = <replaceable class="parameter">path</replaceable></term>
    <listitem>
        <para>
        Use the py-spy executable installed in <replaceable class="parameter">path</replaceable> for debugging when Use PySpy is set to true.
        </para>
    </listitem>
</varlistentry>
</variablelist>
