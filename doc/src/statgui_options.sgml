<variablelist>
<varlistentry>
    <term>-a, --attach <replaceable class="parameter">[hostname:]PID</replaceable></term>
    <listitem>
        <para>
        Attach to the parallel job with resource manager <replaceable class="parameter">[hostname:]PID</replaceable>.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-P, --withpc</term>
    <listitem>
        <para>
        Sample program counter values in addition to function names.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-m, --withmoduleoffset</term>
    <listitem>
        <para>
        Sample module offset only.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-i, --withline</term>
    <listitem>
        <para>
        Sample source line number in addition to function names.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-o, --withopenmp</term>
    <listitem>
        <para>
        Translate OpenMP stacks to logical application view
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-U, --countrep</term>
    <listitem>
        <para>
        Only gather edge labels with the task count and a single representative. This will improve performance at extreme (i.e., over 1 million tasks) scales.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-w, --withthreads</term>
    <listitem>
        <para>
        Sample stack traces from helper threads in addition to the main thread.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-y, --withpython</term>
    <listitem>
        <para>
        Where applicable, gather Python script level stack traces, rather than show the Python interpreter stack traces.  This requires the Python interpreter being debugged to be built with -g and preferrably -O0.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-C, --create <replaceable class="parameter">arg_list</replaceable></term>
    <listitem>
        <para>
        Launch the application under STAT's control.  All arguments after -C are used to launch the app.  Namely, <replaceable class="parameter">arg_list</replaceable> is the command that you would normally use to launch your application.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-I, --serial <replaceable class="parameter">arg_list</replaceable></term>
    <listitem>
        <para>
        Attach to a list of serial processes.  All arguments after -I are interpreted as processes.  Namely, <replaceable class="parameter">arg_list</replaceable> is a white-space-separated list of processes to attach to, where each process is of the form [exe@][hostname:]PID.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-d, --debugdaemons</term>
    <listitem>
        <para>
        launch the daemons under the deubgger
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-s, --sleep <replaceable class="parameter">time</replaceable></term>
    <listitem>
        <para>
        Sleep for <replaceable class="parameter">time</replaceable> seconds before attaching and gathering traces.  This gives the application time to get to a hung state.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-l, --log <cmdsynopsis><group><arg><replaceable class="parameter">FE</replaceable></arg><arg><replaceable class="parameter">BE</replaceable></arg><arg><replaceable class="parameter">CP</replaceable></arg></group></cmdsynopsis></term>
    <listitem>
        <para>
        Enable debug logging of the <replaceable class="parameter">FE</replaceable> frontend, <replaceable class="parameter">BE</replaceable> backend, <replaceable class="parameter">CP</replaceable> communication process, <replaceable class="parameter">SW</replaceable> Stackwalker, <replaceable class="parameter">SWERR</replaceable> Stackwalker on error. Multiple log options may be specified (i.e., -l FE -l BE).
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-L, --logdir <replaceable class="parameter">log_directory</replaceable></term>
    <listitem>
        <para>
        Dump logging output into <replaceable class="parameter">log_directory</replaceable>.  To be used with the <option>--log</option> option.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-M, --mrnetprintf</term>
    <listitem>
        <para>
        Use MRNet's printf for STAT debug logging.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-G, --gdb</term>
    <listitem>
        <para>
        Use (cuda-)gdb to drive the daemons. If you are using cuda-gdb and want stack traces from cuda threads, you must also explicitly specify -w.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-Q, --cudaquick</term>
    <listitem>
        <para>
        When using cuda-gdb as the BE, gather less comprehensive, but faster cuda traces. Cuda frames will only show the top of the stack, not the full call path. This also defaults to display filename and line number and will not resolve the function name.
        </para>
    </listitem>
</varlistentry>
<varlistentry>
    <term>-Y, --pyspy</term>
    <listitem>
        <para>
        Use py-spy backend to gather python traces.
        </para>
    </listitem>
</varlistentry>
</variablelist>
