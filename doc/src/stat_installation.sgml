<para>
STAT and its dependencies can also be built via the Spack package management tool, available at <ulink url="https://github.com/spack/spack"></ulink>. Running <command>spack install stat</command> should build STAT and all of its dependencies, including those require for the STAT GUI. Note that three Spack variants exist. The first is <command>+examples</command>, to enable building example MPI code that STAT can be tested against. This is disabled by default to avoid requiring an MPI library, but enabling it will trigger a build of MPI. The second is <command>+dysect</command> to enable building of the DySectAPI. The third is <command>+fgfs</command> to build with FastGlobalFileStatus and target binary broadcast support. FGFS is crucial to scalability, particularly when debugging applications that load several large dynamic libraries.
</para>
<para>
For STAT 4.0.1 and beyond, the spack build of STAT requires Python 3 and will require the activation of the py-xdot package <command>./bin/spack activate py-xdot</command>. For versions up to and including STAT 4.0.0, the spack build of STAT requires Python 2 and requires the activation of the py-pygtk and py-enum34 packages <command>./bin/spack activate py-pygtk</command> and <command>./bin/spack activate py-enum34</command>.
</para>
<para>
When building STAT itself, first run <command>configure</command>.  You will need to use the <option>--with-package</option> options to specify the install prefix for mrnet, graphlib, launchmon, libdwarf, and dyninst.  These options will add the necessary include and library search paths to the compile options.  Refer to <command>configure --help</command> for exact options.  You may also wish to specify the maximum number of communication processes to launch per node with the option <option>--with-procspernode=number</option>, generally set to the number of cores per node. 
</para>
<para>
STAT creates wrapper scripts for the <command>stat-cl</command> and <command>stat-gui</command> commands.  These wrappers set appropriate paths for the launchmon and mrnet_commnode executables, based on the <option>--with-launchmon</option> and <option>--with-mrnet</option> configure options, thus it is important to specify both of these even if they share a prefix.
</para>
<para>
STAT will try to build the GUI by default.  Building and running the STAT GUI requires SWIG and pygtk.  If you need to modify your PYTHONPATH envirnment variable to search for side installed site-packages, you can do this by specifying <option>STAT_PYTHONPATH=path</option> during configure.  This will add the appropriate directory to the $PYTHONPATH environment variable within the stat-gui script.  To disable the building of the GUI, use the <option>--enable-gui=no</option> configure option.
</para>
<para>
On BlueGene systems, be sure to <command>configure --with-bluegene</command>.  This will enable the BGL macro for BlueGene specific compilation.  It is important to note that on BlueGene systems, you may need to use an alternate hostname for the front-end node in order to get MRNet to bind to the appropriate network interface that can communicate with the I/O nodes.  By default, STAT will append "-io" to the hostname.  Alternatively, you can specify the hostname with the STAT_FE_HOSTNAME environment variable.
</para>
<para>
To compile on Cray systems runnig alps, you no longer need to specify <option>--with-cray-alps</option>.  An example configure line for Cray:
</para>
<informalexample>
    <screen>
./configure --with-launchmon=/tmp/work/lee218/install \
--with-mrnet=/tmp/work/lee218/install \
--with-graphlib==/tmp/work/lee218/install \
--with-stackwalker=/tmp/work/lee218/install \
--with-libdwarf=/tmp/work/lee218/install \
--prefix=/tmp/work/lee218/install \
MPICC=cc MPICXX=CC MPIF77=ftn --enable-shared LD=/usr/bin/ld   
    </screen>
</informalexample>
<para>
Note that specifying <option>LD=/usr/bin/ld</option> may be required on Cray systems to avoid using the compute node linker.  It is also worth noting that Cray includes a build of STAT as part of their system software stack.  It is typically installed in /opt/cray/stat and can be loaded via modules.  
</para>
<para>
After running configure you just need to run:
</para>
<informalexample>
    <screen>
make
make install
    </screen>
</informalexample>
<para>
Note that STAT hardcodes the paths to its daemon and filter shared object, assuming that they are in $prefix/bin and $prefix/lib respectively, thus testing should be done in the install prefix after running <command>make install</command> and the installation directory should not be moved.  The path to these components can, however, be overridden with the <option>--daemon</option> and <option>--filter</option> arguments.  Further, the STAT_PREFIX environment variable can be defined to override the hardcoded paths in STAT.

STAT will also, by default, add rpaths to dependent libraries.  This behavior can be disabled by specifying <option>--with-rpath=no</option>.  However, when doing so, you must be sure to set LD_LIBRARY_PATH to point to the directories containing the dependent libraries.
</para>

<para>
STAT can also be configured to use GDB as a backend instead of Dyninst. To specify the path to gdb, use the <option>--with-gdb</option> flag. If CUDA kernal traces are desired, the path should point to a working cuda-gdb executable. Note that STAT currently still requires Dyninst as a dependence even when using the GDB backend.
</para>

<para>
STAT has the ability to use py-spy to gather python stack traces. To specify the path to py-spy, use the <option>--with-pyspy</option> flag.
</para>

<para>
Dyninst 12 removed the local_var.h header file that STAT uses to gather python traces. If this feature is needed, you will either need to use Dyninst version 11 or lower, or copy the local_var.h file from <ulink url="https://raw.githubusercontent.com/dyninst/dyninst/5c7e0ee327399cfae50d77f977ff6655c2ca3ae4/stackwalk/h/local_var.h"></ulink> to your Dyninst 12+ installation's include directory
</para>
