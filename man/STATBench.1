.\" auto-generated by docbook2man-spec from docbook-utils package
.TH "STAT-BENCH" "1" "2018-02-02" "" ""
.SH NAME
stat-bench \- invoke the Stack Trace Analysis Tool Benchmark.
.SH SYNOPSIS
.sp
\fBstat-bench\fR [ \fB\fIOPTIONS\fB\fR ] 
.PP
where
.sp
.nf
    
.sp
 [ \fB\fIOPTIONS\fB\fR ] 

    represents zero or more stat-bench options.
    
.sp
.fi
.SH "DESCRIPTION"
.PP
The Stack Trace Analysis Tool is a highly scalable, lightweight tool that gathers and merges stack traces from all of the processes of a parallel application. \fBstat-bench\fR is a benchmark that can emulate STAT's performance. By utilizing your entire parallel allocation (launching one stat-bench daemon emulator per core) and generating artificial stack traces, stat-bench is able model STAT's performance using less resources than an actual STAT run requires. With various options, you can also map stat-bench to your target machine architecture and target application. After completion, stat-bench will create a stat_results directory in your current working directory. This directory will contain a subdirectory for the current run, with the merged stack traces in DOT format as well as a performance results text file. 
.SH "OPTIONS"
.TP
\fB-a, --autotopo\fR
let STAT automatically create topology.
.TP
\fB-f, --fanout \fIwidth\fB\fR
Sets the maximum tree topology fanout to \fIwidth\fR\&. Specify nodes to launch communications processes on with \fB--nodes\fR\&.
.TP
\fB-d, --depth \fIdepth\fB\fR
Sets the tree topology depth to \fIdepth\fR\&. This option takes precedence over the \fB--fanout\fR option. Specify nodes to launch communications processes on with \fB--nodes\fR\&.
.TP
\fB-u, --usertopology \fItopology\fB\fR
Specify the number of communication nodes per layer in the tree topology, separated by dashes, with \fItopology\fR\&. This option takes precedence over the \fB--fanout\fR and \fB--depth\fR options. Specify nodes to launch communications processes on with \fB--nodes\fR\&. Example topologies: 4, 4-16, 5-20-75.
.TP
\fB-n, --nodes \fInodelist\fB\fR
Use the specified nodes in \fInodelist\fR\&. To be used with \fB--fanout\fR, \fB--depth\fR, or \fB--usertopology\fR options. Example nodes lists: host1; host1,host2; host[1,5-7,9].
.TP
\fB-A, --appnodes\fR
Allow tool communication processes to be co-located on nodes running application processes.
.TP
\fB-p, --procs \fIprocesses\fB\fR
Sets the maximum number of communication processes to be spawned per node to \fIprocesses\fR\&. This should typically be set to the number of CPUs per node.
.TP
\fB-D, --daemon \fIpath\fB\fR
Specify the full path \fIpath\fR to the STATBenchD daemon executable. Use this only if you wish to override the default.
.TP
\fB-F, --filter \fIpath\fB\fR
Specify the full path \fIpath\fR to the stat-bench filter shared object. Use this only if you wish to override the default.
.TP
\fB-t, --traces \fIcount\fB\fR
Gather \fIcount\fR traces per process.
.TP
\fB-i, --iters \fIcount\fB\fR
Perform \fIcount\fR gathers.
.TP
\fB-n, --numtasks \fIcount\fB\fR
Emulate \fIcount\fR tasks per daemon.
.TP
\fB-m, --maxdepth \fIdepth\fB\fR
Generate traces with a maximum depth of \fIdepth\fR\&.
.TP
\fB-b, --branch \fIwidth\fB\fR
Generate traces with a max branching factor of \fIwidth\fR\&.
.TP
\fB-e, --eqclasses \fIcount\fB\fR
Generate traces within \fIcount\fR equivalence classes.
.TP
\fB-U, --countrep\fR
Only gather edge labels with the task count and a single representative.
.TP
\fB-l, --log\fR
Enable debug logging of the \fIFE\fR frontend, \fIBE\fR backend, or \fICP\fR communication process. Multiple log options may be specified (i.e., -l FE -l BE).
.TP
\fB-L, --logdir \fIlog_directory\fB\fR
Dump logging output into \fIlog_directory\fR\&. To be used with the \fB--log\fR option.
.TP
\fB-M, --mrnetprintf\fR
Use MRNet's printf for STAT debug logging.
.SH "EXAMPLE"
.PP
In the simplest form, you can invoke stat-bench, from within a parallel allocation, with no arguments. This will run through with the default settings:
.PP
.sp
.nf
  % stat-bench
    
.sp
.fi
.PP
To model your target machine architecture, you can specify the number of tasks to emulate per daemon. For instance if your target machine has 16-way SMP compute nodes:
.PP
.sp
.nf
  % stat-bench --numtasks 16
    
.sp
.fi
.PP
You may also want to model a specific application. For instance, you may have a climate modeling code with 5 distinct task behaviors, or equivalence classes. You can also specify the maximum call depth of your application, the average branching factor from a given function, and the number of distinct traces expected per task:
.PP
.sp
.nf
  % stat-bench --eqclasses 5 --maxdepth 17 --branch 5 --traces 4
    
.sp
.fi
.PP
At larger scales, you may want to employ a more scalable tree topology. For example, if you're running 1024 daemon emulators, you may want to try a fanout of sqrt(1024) = 32. You will need to specify a list of nodes that contains enough processors to accommodate the ceil(1024/32) = 32 communication processes being launched. Be sure that you have login permissions to the specified nodes and that they contain the mrnet_commnode executable and the STAT_FilterDefinitions.so library:
.PP
.sp
.nf
  % stat-bench --fanout 32 --nodes atlas[1-4] --procs 8
    
.sp
.fi
.SH "AUTHOR"
.PP
(Written by ) Gregory  L.  Lee  
<lee218@llnl.gov>
.SH "COPYRIGHT"
.PP
Copyright 2007-2020 Lawrence Livermore National Laboratory
.PP
This is free software; see the source for copying conditions. There is NO warranty; not even for MECHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.PP
\fBstat-cl\fR(1), \fBstat-gui\fR(1), \fBstat-view\fR(1)
