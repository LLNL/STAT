.\" auto-generated by docbook2man-spec from docbook-utils package
.TH "STAT-VIEW" "1" "2018-02-02" "" ""
.SH NAME
stat-view \- invoke the Stack Trace Analysis Tool viewer.
.SH SYNOPSIS
.sp
\fBstat-view\fR [ \fB\fIfile.dot\fB\fR\fI...\fR ] 
.PP
where
.sp
.nf
    
.sp
 [ \fB\fIfile.dot\fB\fR\fI...\fR ] 

    represents zero or more STAT generated .dot files.
    
.sp
.fi
.SH "DESCRIPTION"
.PP
\fBstat-view\fR is a GUI for viewing STAT-outputted dot files. \fBstat-view\fR provides easy navigation of the call prefix tree and also allows manipulation of the call tree to help focus on areas of interest. Each node in the STAT call prefix tree represents a function call and the directed edges denote the calling sequence. Further, the edges are labeled by the set of tasks that have taken that call path. For simplification, stat-view will display the number of tasks in the set and truncate long task lists in the main display with "..." notation. Similarly, long function node label names will be truncated with "..." notation. The truncation length can be modified via the File->Preferences menu (this requires clicking the \fBLayout\fR button to rerender any already loaded graphs). Nodes are colored based on the set of tasks of the incoming edge, providing a visual distinction when different tasks take different branches.
.PP
The \fBstat-view\fR GUI also allows you to view the application source files in the stack traces, when sampling is done at the source file and line number granularity. This may require the source file's path to be added to the search path, through File -> Add Search Paths\&. If an application's source code is edited after STAT is run, the line numbers shown in the stack traces may not be accurate. To alleviate this problem, STAT can optionally cache the source files for the currently displayed .dot file. To cache files click on the File -> Add Search Paths menu item. This will find and save the source files in the .dot file's stat_results directory. The next time you open the .dot file with \fBstat-view\fR, the source files will automatically be loaded from the cache.
.PP
By left clicking on a node in the call prefix tree you will get a window displaying the full list of tasks and the full frame label . This window also contains buttons that allow for the manipulation of the graph from that node. Right clicking on a node provides a pop-up menu with the same options. Note all of these operations are performed on the current visible state of the call prefix tree.
.PP
The node operations are defined as follows:
.TP
\fBAdvanced\fR
Display the full node and edge attributes.
.TP
\fBJoin Equivalence Class\fR
collapses all of the descendent nodes with the same equivalence class into the current node and renders in a new tab.
.TP
\fBCollapse\fR
hide all of the descendents of the selected node.
.TP
\fBCollapse Depth\fR
collapse the entire tree to the depth of the selected node.
.TP
\fBHide\fR
the same as \fBCollapse\fR, but also hides the selected node.
.TP
\fBExpand\fR
show (unhide) the immediate children of the selected node.
.TP
\fBExpand All\fR
show (unhide) all descendents of the selected node.
.TP
\fBFocus\fR
hide all nodes that are neither ancestors nor descendents of the selected node. (Note: This will not unhide any hidden ancestors.)
.TP
\fBView Source\fR
creates a popup window displaying the source file (only for stack traces with line number information). This may require the source file's path to be added to the search path, through File -> Add Search Paths\&.
.TP
\fBTranslate\fR
For traces with module and offset granularity, this button will translate all node labels into source file and line number information and open the resulting graph in a new tab.
.TP
\fBTemporally Order Children\fR
(prototype only) determine the temporal order of the node's children (only for stack traces with line number information). Requires the source file's path and all include paths to be added to the search path, through File -> Add Search Paths\&.
.TP
\fBOK\fR
closes the pop-up window.
.PP
The main window also has several tree manipulation options . Note the initial click of a traversal operation operates on the original call prefix tree, while the remaining operations are performed on the current visible state of the call prefix tree.
.PP
.PP
The toolbar operations are defined as follows:
.PP
.TP
\fBOpen\fR
Open a STAT generated .dot file
.TP
\fBSave As\fR
Save the current graph in .dot format, which can be displayed by stat-view or in an image format, such as PNG or PDF, which can be viewed on any computer with an image viewer
.TP
\fBUndo\fR
Undo the previous operation
.TP
\fBRedo\fR
Redo the undone operation
.TP
\fBReset\fR
Revert to the original graph
.TP
\fBLayout\fR
Reset the layout of the current graph and open in a new tab. This is useful for compacting wide trees after performing some pruning operations.
.TP
\fBCut\fR
This feature allows you to collapse the prefix tree below the implementation frames for various programming models. For instance, a user may wish to hide all calls that happen within the MPI library. The programming models may be entered in a configuration file or added by the user. STATview looks for configuration files in $prefix/etc/STAT/STATview_models.conf and in $HOME/.STATview_models.conf. Programming models are specified as regular expressions, using Python's \fBre\fR module syntax, and the \fBre.search\fR function is used in favor of \fBre.match\fR\&.
.TP
\fB[Cut] MPI\fR
Collapse the MPI implementation frames below the MPI function call.
.TP
\fB[Cut] Pthreads\fR
Collapse the Pthread implementation frames below the Pthread function call.
.TP
\fBJoin\fR
Join consecutive nodes of the same equivalence class into a single node and render in a new tab. This is useful for condensing long call sequences.
.TP
\fB[Traverse] Eq C\fR
Traverse the prefix tree by expanding the leaves to the next equivalence class set. The first click will display the top-level equivalence class.
.TP
\fB[Traverse Longest] Path\fR
Traversal focus on the next longest call path(s). The first click will focus on the longest path.
.TP
\fB[Traverse Shortest] Path\fR
Traversal focus on the next shortest call path(s). The first click will focus on the shortest path.
.TP
\fB[Traverse Least] Tasks\fR
Traversal focus on the path(s) with the next least visiting tasks. The first click will focus on the path with the least visiting tasks.
.TP
\fB[Traverse Most] Tasks\fR
Traversal focus on the path(s) with the next most visiting tasks. The first click will focus on the path with the most visiting tasks.
.TP
\fB[Traverse Least] TO\fR
Temporal Order traversal focus on the path(s) that have made the least execution progress in the application. The first click will focus on the path that has made the least progress.
.TP
\fB[Traverse Most] TO\fR
Temporal Order traversal focus on the path(s) that have made the most execution progress in the application. The first click will focus on the path that has made the most progress.
.TP
\fBSearch\fR
Search for call paths containing specified text, taken by specified tasks, or from specified hosts. Search text may be a regular expression, using the syntax described in  <URL:http://docs.python.org/library/re.html>\&.
.TP
\fB[Identify] Eq C\fR
Identify the equivalence classes of the visible graph. After clicking on this button, a window will pop up showing the complete list of equivalence classes.
.SH "AUTHOR"
.PP
(Written by ) Gregory  L.  Lee  
<lee218@llnl.gov>
.SH "COPYRIGHT"
.PP
Copyright 2007-2020 Lawrence Livermore National Laboratory
.PP
This is free software; see the source for copying conditions. There is NO warranty; not even for MECHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.PP
\fBstat-cl\fR(1), \fBstat-gui\fR(1), \fBstat-bench\fR(1)
