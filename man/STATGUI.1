.\" auto-generated by docbook2man-spec from docbook-utils package
.TH "STAT-GUI" "1" "2018-02-02" "" ""
.SH NAME
stat-gui \- invoke the Stack Trace Analysis Tool GUI.
.SH SYNOPSIS
.sp
\fBstat-gui\fR [ \fB\fIOPTIONS\fB\fR ] 
.PP
where
.sp
.nf
    
.sp
 [ \fB\fIOPTIONS\fB\fR ] 

    represents zero or more stat-gui options.
    
.sp
.fi
.SH "DESCRIPTION"
.PP
stat-gui is a GUI that drives STAT, the Stack Trace Analysis Tool, and allows you to interactively control the sampling of stack traces from your parallel application. stat-gui is built on stat-view and provides the same call tree manipulation operations. For more on these operations see \fBstat-view\fR\&.
.PP
In addition to the operations provided by stat-view, stat-gui provides a toolbar to control STAT's operation.
.TP
\fBAttach\fR
Attach to your application and gather an initial sample. 
.TP
\fBReAttach\fR
Reattach to the parallel application and gather an initial sample.
.TP
\fBDetach\fR
Detach from your application.
.TP
\fBPause\fR
Put the application in a stopped state.
.TP
\fBResume\fR
Set the application running.
.TP
\fBSample\fR
Gather and merge a single stack trace from each task in your parallel application. The application is left in a stopped state after sampling.
.TP
\fBSample Multiple\fR
Gather and merge multiple stack traces from each task in your parallel application over time. The application is left in a stopped state after sampling.
.PP
stat-gui can also serve as an interface to attach a full-featured debugger such as TotalView or DDT to a subset of application tasks. This interface can be accessed through the "identify equivalence classes" \fBEq C\fR button, which will pop up the equivalence classes window . You can then select a single representative, all, or none of an equivalence classes' tasks to form a subset of tasks. The \fBAttach to Subset\fR buttons will launch the specified debugger and attach to the subset of tasks (note, this detaches STAT from the application). The \fBDebugger Options\fR button allows you to modify the debugger path.
.PP
.SH "OPTIONS"
.TP
\fB-a, --attach \fI[hostname:]PID\fB\fR
Attach to the parallel job with resource manager \fI[hostname:]PID\fR\&.
.TP
\fB-P, --withpc\fR
Sample program counter values in addition to function names.
.TP
\fB-m, --withmoduleoffset\fR
Sample module offset only.
.TP
\fB-i, --withline\fR
Sample source line number in addition to function names.
.TP
\fB-o, --withopenmp\fR
Translate OpenMP stacks to logical application view
.TP
\fB-U, --countrep\fR
Only gather edge labels with the task count and a single representative. This will improve performance at extreme (i.e., over 1 million tasks) scales.
.TP
\fB-w, --withthreads\fR
Sample stack traces from helper threads in addition to the main thread.
.TP
\fB-y, --withpython\fR
Where applicable, gather Python script level stack traces, rather than show the Python interpreter stack traces. This requires the Python interpreter being debugged to be built with -g and preferrably -O0.
.TP
\fB-C, --create \fIarg_list\fB\fR
Launch the application under STAT's control. All arguments after -C are used to launch the app. Namely, \fIarg_list\fR is the command that you would normally use to launch your application.
.TP
\fB-I, --serial \fIarg_list\fB\fR
Attach to a list of serial processes. All arguments after -I are interpreted as processes. Namely, \fIarg_list\fR is a white-space-separated list of processes to attach to, where each process is of the form [exe@][hostname:]PID.
.TP
\fB-d, --debugdaemons\fR
launch the daemons under the deubgger
.TP
\fB-s, --sleep \fItime\fB\fR
Sleep for \fItime\fR seconds before attaching and gathering traces. This gives the application time to get to a hung state.
.TP
\fB-l, --log\fR
Enable debug logging of the \fIFE\fR frontend, \fIBE\fR backend, \fICP\fR communication process, \fISW\fR Stackwalker, \fISWERR\fR Stackwalker on error. Multiple log options may be specified (i.e., -l FE -l BE).
.TP
\fB-L, --logdir \fIlog_directory\fB\fR
Dump logging output into \fIlog_directory\fR\&. To be used with the \fB--log\fR option.
.TP
\fB-M, --mrnetprintf\fR
Use MRNet's printf for STAT debug logging.
.TP
\fB-G, --gdb\fR
Use (cuda-)gdb to drive the daemons. If you are using cuda-gdb and want stack traces from cuda threads, you must also explicitly specify -w.
.TP
\fB-Q, --cudaquick\fR
When using cuda-gdb as the BE, gather less comprehensive, but faster cuda traces. Cuda frames will only show the top of the stack, not the full call path. This also defaults to display filename and line number and will not resolve the function name.
.SH "AUTHOR"
.PP
(Written by ) Gregory  L.  Lee  
<lee218@llnl.gov>
.SH "COPYRIGHT"
.PP
Copyright 2007-2020 Lawrence Livermore National Laboratory
.PP
This is free software; see the source for copying conditions. There is NO warranty; not even for MECHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
.SH "SEE ALSO"
.PP
\fBstat-cl\fR(1), \fBstat-view\fR(1), \fBstat-bench\fR(1)
